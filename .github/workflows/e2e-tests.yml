name: E2E COA Validation Test
on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 16 * * *' # 한국 시간 기준 매일 새벽 1시

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      # 테스트 실행. continue-on-error: true는 테스트가 실패해도 다음 단계를 계속 진행하게 합니다.
      - name: Run Playwright tests
        id: playwright_test
        continue-on-error: true
        env:
          ADEKA_ID: ${{ secrets.ADEKA_ID }}
          ADEKA_PASSWORD: ${{ secrets.ADEKA_PASSWORD }}
          BASE_URL: 'https://spc.adkk.co.kr:8091'
          CI: true
        run: npx playwright test

      # [추가됨] 테스트 결과 요약 및 이슈 본문 생성
      - name: Summarize results and create issue body
        id: summarize
        if: always() # 테스트 성공/실패 여부와 관계없이 항상 실행
        run: |
          node -e "
            const fs = require('fs');
            const summaryPath = 'test-results/summary.json';
            if (!fs.existsSync(summaryPath)) {
              console.log('테스트 요약 파일(summary.json)이 없습니다.');
              fs.writeFileSync('issue-body.md', '테스트 실행 중 심각한 오류가 발생하여 요약 파일을 생성하지 못했습니다.');
              return;
            }
            const results = JSON.parse(fs.readFileSync(summaryPath, 'utf-8'));
            const total = results.length;
            const failures = results.filter(r => r.status === 'failure');
            const successCount = total - failures.length;
            const successRate = total > 0 ? (successCount / total * 100).toFixed(2) : '100.00';

            let summary = '## 📈 E2E 테스트 결과 요약\\n\\n';
            summary += `- **총 LOT 수:** ${total}개\\n`;
            summary += `- **성공:** ${successCount}개\\n`;
            summary += `- **실패:** ${failures.length}개\\n`;
            summary += `- **성공률:** ${successRate}%\\n\\n`;

            if (failures.length > 0) {
              summary += '### ❌ 실패 항목 상세\\n\\n';
              summary += '| 제품명 | LOT 번호 | 실패 사유 |\\n';
              summary += '|---|---|---|\\n';
              failures.forEach(f => {
                const errorMsg = f.error.replace(/\\n/g, ' ').replace(/\\u001b\\[[0-9;]*m/g, '');
                summary += `| ${f.productName} | ${f.lotNumber} | ${errorMsg} |\\n`;
              });
              fs.writeFileSync('issue-body.md', summary);
            }
            
            console.log(summary.replace(/\\n/g, '\n'));
            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summary.replace(/\\n/g, '\n'));
          "
      
      # [추가됨] 테스트 실패 시 GitHub 이슈 생성
      - name: Create GitHub Issue on Failure
        if: steps.playwright_test.outcome == 'failure' # 'Run Playwright tests' 단계가 실패했을 때만 실행
        uses: actions-ecosystem/action-create-issue@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          title: "🚨 [자동화 테스트 실패] COA 검증 오류 발생"
          body_path: ./issue-body.md
          labels: |
            bug
            automated-test
            
      # [추가됨] 테스트 최종 상태 확인
      - name: Check test status
        if: steps.playwright_test.outcome == 'failure'
        run: exit 1 # 테스트 단계가 실패했다면 워크플로우 전체를 실패 처리

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-and-failures
          path: |
            playwright-report/
            test-results/
          